{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","None","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","reverseField","preparedGoods","sort","element1","element2","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","handleSort","field","orderChanged","className","onClick","type","cn","prevIsReversed","map","element","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,mBAAAA,I,wBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAUI,MAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA/BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWM,EACb,EADaA,aAEPC,EAAa,YAAOF,GAqB1B,OAnBIL,GACFO,EAAcC,MAAK,SAACC,EAAUC,GAC5B,OAAQV,GACN,KAAKL,EAAUgB,SACb,OAAOF,EAASG,cAAcF,GAEhC,KAAKf,EAAUkB,OACb,OAAOJ,EAASK,OAASJ,EAASI,OAEpC,QACE,OAAO,MAKXR,GACFC,EAAcQ,UAGTR,EAMcS,CAAiBpB,EACpC,CAAEI,YAAWM,aAAcJ,IAEvBe,EAAa,SAACC,GAAD,OAAsB,kBAAMjB,EAAaiB,KAOtDC,EAAejB,GAAcF,IAAcL,EAAUI,KAE3D,OACE,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAASJ,EAAWtB,EAAUgB,UAC9BW,KAAK,SACLF,UAAWG,IAAG,iBACZ,CAAE,WAAYvB,IAAcL,EAAUgB,WAJ1C,iCASA,wBACEU,QAASJ,EAAWtB,EAAUkB,QAC9BS,KAAK,SACLF,UAAWG,IAAG,oBACZ,CAAE,WAAYvB,IAAcL,EAAUkB,SAJ1C,4BASA,wBACEQ,QA9Bc,kBAAMlB,GAAc,SAAAqB,GAAc,OAAKA,MA+BrDF,KAAK,SACLF,UAAWG,IAAG,oBACZ,CAAE,YAAarB,IAJnB,qBASCiB,GACC,wBACEE,QAvCU,WAClBlB,GAAc,GACdF,EAAaN,EAAUI,OAsCfuB,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGhB,EAAaqB,KAAI,SAAAC,GAAO,OACvB,oBAAI,UAAQ,OAAZ,SAAoBA,aCjH9BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.26f216b9.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React, { useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  None,\n  Length,\n  Alphabet,\n}\n\ninterface PreparedGoods {\n  sortField: SortField,\n  reverseField: boolean,\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, reverseField }: PreparedGoods,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((element1, element2) => {\n      switch (sortField) {\n        case SortField.Alphabet:\n          return element1.localeCompare(element2);\n\n        case SortField.Length:\n          return element1.length - element2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortField.None);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, reverseField: isReversed });\n\n  const handleSort = (field: SortField) => () => setSortField(field);\n  const handleReverse = () => setIsReversed(prevIsReversed => !prevIsReversed);\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortField(SortField.None);\n  };\n\n  const orderChanged = isReversed || sortField !== SortField.None;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={handleSort(SortField.Alphabet)}\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SortField.Alphabet })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={handleSort(SortField.Length)}\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortField !== SortField.Length })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={handleReverse}\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': !isReversed })}\n        >\n          Reverse\n        </button>\n\n        {orderChanged && (\n          <button\n            onClick={handleReset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(element => (\n          <li data-cy=\"Good\">{element}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}